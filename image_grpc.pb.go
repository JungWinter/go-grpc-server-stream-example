// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: image.proto

package image

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageClient interface {
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (Image_GetImageClient, error)
}

type imageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClient(cc grpc.ClientConnInterface) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (Image_GetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[0], "/image.Image/GetImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageGetImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Image_GetImageClient interface {
	Recv() (*GetImageResponse, error)
	grpc.ClientStream
}

type imageGetImageClient struct {
	grpc.ClientStream
}

func (x *imageGetImageClient) Recv() (*GetImageResponse, error) {
	m := new(GetImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServer is the server API for Image service.
// All implementations should embed UnimplementedImageServer
// for forward compatibility
type ImageServer interface {
	GetImage(*GetImageRequest, Image_GetImageServer) error
}

// UnimplementedImageServer should be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (UnimplementedImageServer) GetImage(*GetImageRequest, Image_GetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}

// UnsafeImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServer will
// result in compilation errors.
type UnsafeImageServer interface {
	mustEmbedUnimplementedImageServer()
}

func RegisterImageServer(s grpc.ServiceRegistrar, srv ImageServer) {
	s.RegisterService(&Image_ServiceDesc, srv)
}

func _Image_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServer).GetImage(m, &imageGetImageServer{stream})
}

type Image_GetImageServer interface {
	Send(*GetImageResponse) error
	grpc.ServerStream
}

type imageGetImageServer struct {
	grpc.ServerStream
}

func (x *imageGetImageServer) Send(m *GetImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Image_ServiceDesc is the grpc.ServiceDesc for Image service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Image_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.Image",
	HandlerType: (*ImageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImage",
			Handler:       _Image_GetImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "image.proto",
}
